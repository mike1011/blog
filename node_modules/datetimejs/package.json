{
  "name": "datetimejs",
  "description": "Library for manipulating, formatting, and parsing dates and times",
  "homepage": "https://github.com/foxbunny/datetimejs/",
  "keywords": [
    "date",
    "time",
    "strftime",
    "strptime",
    "formatting",
    "server",
    "browser"
  ],
  "author": {
    "name": "Branko Vukelic",
    "email": "branko@brankovukelic.com"
  },
  "bugs": {
    "url": "https://github.com/foxbunny/datetimejs/issues",
    "email": "branko@brankovukelic.com"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/foxbunny/datetimejs/blob/master/LICENSE"
  },
  "devDependencies": {
    "volo": "*",
    "coffee-script": "1.6.3",
    "mocha": "*",
    "chai": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/foxbunny/datetimejs.git"
  },
  "engines": {
    "node": ">= 0.4.1"
  },
  "main": "datetime.js",
  "volo": {
    "ignore": [
      "tests",
      "package.json",
      ".gitignore",
      "README.md",
      "LICENSE",
      "volofile",
      "src"
    ]
  },
  "version": "0.3.4",
  "readme": "# DatetimeJS\n\nThis is a shameless (or perhaps shameful) imitation of Python's\n[datetime](http://docs.python.org/2/library/datetime.html) library for\nJavaScript. It provides methods for creating, comparing, formatting and parsing\ndates and times.\n\n + [Motivation](#motivation)\n + [Installation](#installation)\n + [Basic usage](#basic-usage)\n + [API reference](#api-reference)\n   - [`datetime.datetime`](#api-datetime)\n   - [`datetime.dtdelta`](#api-dtdelta)\n   - [`datetime.format`](#api-format)\n   - [`datetime.parse`](#api-parse)\n   - [`datetime.utils`](#api-utils)\n + [Variables](#const)\n   - [`ISO_FORMAT`](#const-isoformat)\n + [Formatting tokens](#formatting-tokens)\n + [Parsing tokens](#parsing-tokens)\n + [Running unit tests](#running-unit-tests)\n + [Known issues](#known-issues)\n + [Reporting bugs](#reporting-bugs)\n\n\n## Motivation <a name=\"motivation\"></a>\n\nThis library existed a bit longer than it may seem from commit logs and other\ninformation. It has been sitting on my hard drive much longer than some of the\nother libraries out there that provide things like strftime formatting.\nUnfortunately, I have not released it until now because I was rather busy with\nother things. It just so happened that I had time on my hands, so I decided to\npolish and release this.\n\nAnother reason is that I have started to use MomentJS, and I hated it with\npassion. There are many reasons why strftime formatting is great, and habit is\nnot even the first reason that comes to mind. Without going further into\nphilosophical discussion, I consider strftime formatting to be superior and I\nwant to use it in JavaScript. Period.\n\n\n## Installation <a name=\"installation\"></a>\n\nThe `datetime.js` module is in UMD format, and it is usable in both the\nbrowsers and NodeJS. It has no external dependencies.\n\nOn Node, you can install using NPM:\n\n    npm install datetimejs\n\nFor browsers, you can simply add it using a `<script>` tag or `require` it as \nyou normally do if you use RequireJS and similar AMD loaders.\n\nIt is also installable with [volo](http://volojs.org/):\n\n    volo add foxbunny/datetimejs\n\n\n## Basic usage <a name=\"basic-usage\"></a>\n\nSince the juicy bit is strftime formatting, let's see an example of that first.\n\n    var dt = require('datetime');  // if you need to\n    var date = new Date(2014, 4, 12, 14, 0, 0);\n    dt.strftime(date, 'The year is %Y, around %i %p on %b %d');\n    // returns 'The year is 2014, around 2 p.m. on May 12'\n\nIdeally, we would be able parse using the same formatting string and the result\nwe've got from `#strftime()`, but that's just not possible right now. So we'll\ngo easy with a slightly more reasonable example.\n\n    date = '9/2/2013 11:45 a.m.'\n    dt.strptime(date, '%n/%D/%Y %i:%M %p');\n    // Returns Date object for Mon Sep 02 2013 11:45:00\n\nBut formatting and parsing isn't all. How about finding out the difference in\ntime between two `Date` objects?\n\n    // Wrapping it in immmediate-execution for people who are \n    // trying this in a shell.\n    (function() {\n        date = new Date();\n        setTimeout(function() {\n            var date1 = new Date();\n            var delta = dt.datetime.delta(date, date1)\n            console.log('Took me ' + delta.seconds + ' seconds');    \n        }, 5400);\n    }());\n    // Will eventually print 'Took me 6 seconds'\n\nOr maybe you don't need an exact delta. You only need to know if something is\nbefore or after?\n\n    var date = new Date(2013, 6, 12);\n    var date1 = new Date(2013, 6, 15);\n    dt.datetime.isAfter(date, date1); // false\n    dt.datetime.isBefore(date, date1); // true\n\nSorting dates is also quite easy:\n\n    dt.datetime.reorder(\n        new Date(2013, 6, 12),\n        new Date(2013, 4, 10),\n        new Date(2013, 5, 15)\n    );\n    // returns [Date(2013, 4, 10), Date(2013, 5, 15), Date(2013, 6, 12)]\n\n\n## API reference <a name=\"api-reference\"></a>\n\nThe `datetime.js` module is organized into several submodules. These are:\n\n + `datetime.datetime` - `Date` object creation and manipulaton\n + `datetime.dtdelta` - Date- and time-difference-related methods\n + `datetime.format` - Date and time formatting\n + `datetime.parse` - Date and time parsing\n + `datetime.utils` - Utility functions\n\n\n### `datetime.datetime`\n\nThis submodule contains methods for creating and manipulating `Date` objects.\n\n\n#### `#clone(d)` <a name=\"api-clone\"></a>\n\nCreates a new `Date` object that has identical date and time to `d`.\n\n\n#### `#addDays(d, v)` <a name==\"api-adddays\"></a>\n\nAdds `v` number of days to `d` `Date` object and returns a new instance. `v`\ncan be either positive or negative. To remove days, simply pass a negative\nvalue. Note that this crosses month and year boundaries, so adding `365` days\nto a `Date` object will forward that object by approximately one year. This\ndoes not take into account leap years, though, so you should use\n[`#addYears()`](#api-addyears) instead.\n\n\n#### `#addMonths(d, v)` <a name=\"api-addmonths\"></a>\n\nAdds `v` number of months to `d` `Date` object and returns a new instance. `v`\ncan be either positive or negative. This method will also change the year if\nneeded. For eample, adding 12 month will forward the date by one year.\n\n\n#### `#addYears(d, v)` <a name=\"api-addyears\"></a>\n\nAdds `v` years to `d` `Date` object. `v` can either be positive or negative.\n\n\n#### `resetTime(d)` <a name=\"api-resettime\"></a>\n\nResets the hours, minutes, seconds, and milliseconds to 0 and returns a new\ninstance.\n\n\n#### `#today()` <a name=\"api-today\"></a>\n\nReturns a `Date` object that represents today's date with time part reset to 0.\n\n\n#### `#thisMonth()` <a name=\"api-thismonth\"></a>\n\nReturns a `Date` object that represents the first day of current month.\n\n\n#### `#thisWeek()` <a name=\"api-thisweek\"></a>\n\nReturns a `Date` object that represents the first day of current week. This\nmethod will use the [`WEEK_START`](#const-weekstart) variable to determine what\nday the week starts on.\n\n\n#### `#toUTC(d)` <a name=\"api-toutc\"></a>\n\nSince JavaScript's date and time API does not really provide means for\nmanipulating time zones, this method provides an ugly hack to get the UTC time\nfor a given `Date` object. It simply shifts the date by the offset of the date\nobject and returns an instance that is in local time, but has date and time\nshifted so it represents the same values as the UTC time zone.\n\n\n### `datetime.dtdelta` <a name=\"api-dtdelta\"></a>\n\nThis module contains methods for working with date and time differences.\n\nPlease note that in comparison methods like [`#isBefore()`](#api-isbefore) or\n[`#isAfter()`](#api-isafter), the first argument is always the value we want to\ntest, and the other arguments are reference values. \n\n    datetime.dtdelta.isBefore(a, b);\n    // 'Is a before b?'\n\n    datetime.dtdelta.isBeteween(a, b, c);\n    // 'Is a between b and c?'\n\n\n#### `#delta(d1, d2)` <a name=\"api-delta\"></a>\n\nCalculates the difference between two `Date` objects and returns a delta\nobject. The delta object has the following structure:\n\n    d.delta // relative difference\n    d.milliseconds // total absolute difference in milliseconds\n    d.seconds // total absolute difference in seconds (rounded up)\n    d.minutes // total absolute difference in minutes (rounded up)\n    d.hours // total absolute difference in hours (rounded up)\n    d.days // total absolute difference in days (rounded up)\n    d.composite // composite absolute difference\n\nThe `delta` key is the same as performing `d2 - d1` (and that is how it's\nobtained).\n\n'Relative difference' means the difference between `d1` and `d2` relative to\n`d1`. This can be a negative or positive number in milliseconds. All other\nvalues (including the `milliseconds` key) are absolute, which means they are\nalways positive.\n\nThe composite difference is an array containing the total difference broken\ndown into days, hours, minutes, seconds, and milliseconds.\n\n\n#### `#reorder(d, [d1, d2...])` <a name=\"api-reorder\"></a>\n\nReorders the `Date` objects passed as arguments from the oldest to newest. This\nmethod takes any number of arguments, and does not take arrays.\n\nIf you want to pass an array, you can simply apply `#reorder()`:\n\n    var a = [d1, d2, d3];\n    datetime.dtdelta.reorder.apply(null, a);\n\nThere is no native support for reverse sorting. You can always reverse the\nresult, though:\n\n    var res = datetime.dtdelta.reorder(d1, d2, d3);\n    res.reverse()\n\n_New in 0.3.0:_ This method no longer uses `#delta()` internally, so\noverloading the `#delta()` method will not change its behavior.\n\n\n#### `#isBefore(d, d1)` <a href=\"api-isbefore\"></a>\n\nReturns `true` is `d` is before `d1`. Note that if the objects represent the\nsame time, the method will return `false`.\n\n\n#### `#isAfter(d, d1)` <a href=\"api-isafter\"></a>\n\nReturns `true` if `d` is after `d1`. Note that if the objects rerpresent the\nsame time, the method will return `false`.\n\n\n#### `#isBetween(d, d1, d2)` <a href=\"api-isbetween\"></a>\n\nReturns `true` if `d` is between `d1` and `d2` (and not equal to either `d1` or\n`d2`). Note that the order of `d1` and `d2` does not matter.\n\n\n#### `#isDateBefore(d, d1)` <a href=\"api-isdatebefore\"><a>\n\nSame as [`#isBefore()`](#api-isbefore) but ignores the time differences.\n\n\n#### `#isDateAfter(d, d1)` <a href=\"api-isdateafter\"><a>\n\nSame as [`#isAfter()`](#api-isafter) but ignores the time differences.\n\n\n#### `#isDateBetween(d, d1, d2)` <a href=\"api-isdatebetween\"></a>\n\nSale as [`#isBetween()`](#api-isbetween) but ignores the time differences.\n\n\n#### `#isLeapYear(d)` <a href=\"api-isleapyear\"></a>\n\nReturns `true` if `d` object is in a leap year.\n\n\n### `datetime.format`\n\nThis submodule contains methods related to formatting dates.\n\n\n#### `#strftime(d, sformat)` <a name=\"api-strftime\"></a>\n\nFormats date and time. The `d` argument is a JavaScript `Date` object, and\n`sformat` is an arbitrary  string containing the formatting tokens (see\n[Formatting tokens](#formatting-tokens)).\n\nThis method is aliased as `datetime.strftime` for convenience.\n\nExample:\n\n    var d = new Date(2013, 8, 21, 12, 10, 32)\n    datetime.strftime(d, 'The date is %D %B %Y');\n    // returns 'The date is 21 September 2013'\n\n\n#### `#isoformat(d)` <a name=\"api-isoformat\"></a>\n\nShortcut for formatting using ISO format. You can change the ISO format you are\ngoing to be using by changing the [`ISO_FORMAT`](#const-isoformat) variable.\n\nThe date is internally converted to UTC before formatting, so the resulting\ntimestamp is always in UTC regardless of your platform's local time zone.\n\nThis method is aliased as `datetime.isoformat` for convenience.\n\n\n### `#reformat(s, [input,] output)` <a name=\"api-reformat\"></a>\n\nReformats the string `s` from input format to output format.\n\nInput format is optional and this method will defer to \n`datetime.parse.isoparse()` if `input` is not specified.\n\nExample:\n\n    var s = '12 May 2013'\n    datetime.reformat(s, '%D %B %Y', '%Y-%m-%d')\n    // returns '2013-05-12'\n\n### `datetime.parse`\n\nThis submodule contains methods for parsing dates and times.\n\n\n#### `#strptime(s, sformat)` <a name=\"api-strptime\"></a>\n\nParses date and time. This method will parse a string `s` containing a date\nand/or time formatted as `sformat`. The `format` string is similar to the one\nused in `#strftime()` except that it uses a subset of formatting tokens (see\n[Parsing tokens](#parsing-tokens)).\n\nThis method is aliased as `datetime.strptime` for convenience.\n\nExample:\n\n    var s = 'The date is 21 September 2013'\n    datetime.strptime(s, 'The date is %D %B %Y')\n    // returns Date(2013, 8, 21, 0, 0, 0, 0)\n\n\n#### `#isoparse(s)` <a name=\"api-isoparse\"></a>\n\nShortcut for parsing a string using ISO format. You can change the ISO format\nyou are going to be using by changing the [`ISO_FORMAT`](#const-isoformat)\nvariable.\n\nThe input string is considered to represent a date and time in UTC and is\ncompensated for time zone difference between UTC and platform's local time\nzone. The output date time object will always be in local time.\n\nThis method is alias as `datetime.strptime` for convenience.\n\n\n## `datetime.utils` <a name=\"api-utils\"></a>\n\nTODO\n\n\n## Variables <a name=\"const\"></a>\n\nSome of DatetimeJS's behavior and output can be customized by changing the\ninternal variables. \n\nThe internal variables are all exposed through the`datetime` module. This is\ndone intentionally for customization purposes.\n\nTo get or set a variable simple use it as `datetime` property:\n\n    datetime.DY = ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'];\n\n\n### `DATE_MS` <a name=\"const-datems\"></a>\n\nDefault is 86400000. Number of milliseconds in a day. Changing this _will_\ngenerally lead to weird behavior, but you're free to do it if you know what you\nare doing.\n\n\n### `REGEXP_CHARS` <a name=\"const-regexpchars\"></a>\n\nAn array of regexp characters that the parser will escape before parsing. By\ndefault, these are the following:\n\n    ^ $ [ ] ( ) . { } + * ? |\n\n\n### `MONTHS` <a name=\"const-months\"></a>\n\nArray containing full month names. Default is English month names.\n\n\n### `MNTH` <a name=\"const-mnth\"></a>\n\nArray containing three-letter abbreviation of month names. Default is\nabbreviated English month names.\n\n\n### `DAYS` <a name=\"const-days\"></a>\n\nArray containing full English week day names.\n\n\n### `DY` <a name=\"const-dy\"></a>\n\nArray containing abbreviated three-letter English week day names.\n\n\n### `AM` <a name=\"const-am\"></a>\n\nThe abbreviated ante-meridiem. By default it's 'a.m.'.\n\n\n### `PM` <a name=\"const-pm\"></a>\n\nThe abbreviated post-meridiem. By default it's 'p.m.'.\n\n\n### `WEEK_START` <a name=\"const-weekstart\"></a>\n\nNumeric week day on which week starts, where 0 is Sunday. By default, it's 0\n(Sunday).\n\n\n### `FORMAT_TOKENS` <a name=\"const-formattokens\"</a>\n\nThis variable is an object, that maps [formatting tokens](#formatting-tokens)\nto formatting functions. \n\nEach formatting function is applied to the date object being formatted and\nreturns a string representing the value of its token. \n\nTo add new tokens, simply add a new key to this object that represents the\ntoken (it will be used directly in a regexp, so make sure any special\ncharacters are escaped), and assign a function that will do the formatting. The\n`this` inside the function represents the date object.\n\nFor example, let's add a token '%o' that will return a date in ordinal format:\n\n    datetime.FORMAT_TOKENS['%o'] = function() {\n        var date = this.getDate().toString();\n        if (['11', '12', '13'].indexOf(date) >= 0) {\n            return date + 'th';\n        }\n        switch (date.slice(-1)) {\n            case '1': return date + 'st';\n            case '2': return date + 'nd';\n            case '3': return date + 'rd';\n            default: return date + 'th';\n        }\n    };\n\n    var d1 = new Date(2013, 8, 1);\n    var d2 = new Date(2013, 8, 2);\n    var d3 = new Date(2013, 8, 3);\n    var d4 = new Date(2013, 8, 15);\n\n    console.log(datetime.strftime(d1, 'On %o'));\n    console.log(datetime.strftime(d2, 'On %o'));\n    console.log(datetime.strftime(d3, 'On %o'));\n    console.log(datetime.strftime(d4, 'On %o'));\n\n    // On 1st\n    // On 2nd\n    // On 3rd\n    // On 4th\n\nAs you can see, you are not really limited to standard tokens for formatting.\nDevelopers can use this feature to add tokens that are specific to the \napplication as well, not just date formatting in general (e.g., output an\nentire block of HTML depending on the date's value).\n\nNote that tokens are not limited to 2 characters nor do they have to start with\na percent character. They are case sensitive, though.\n\n(If you are wondering why this seemingly very useful token isn't included by\ndefault, it's because it's English only, and DatetimeJS is supposed to b easy\nto localize.)\n\n\n### `PARSE_RECIPES` <a name=\"const-parserrecipes\"></a>\n\nThis variable is a [`FORMAT_TOKENS`](#const-formattokens) counterpart used for\nparsing. Again, each token is a key on this object, and it maps to a function\nthat performs the parsing.\n\nThe parsing function must return an object with two keys. The `re` key contains\nthe regexp fragment that matches values for the given token, and the `fn` key\ncontains a function that transforms a `meta` object later used by the parser to\nconstruct a date object. \n\nThe meta object has following properties:\n\n    meta.year // full integer year\n    meta.month // 0-indexed month\n    meta.date // integer date (as in day of month)\n    meta.hour // integer hour in 12- or 24-hour format\n    meta.minute // integer minute\n    meta.second // integer second\n    meta.millisecond // integer millisecond (0 to 999)\n    meta.timeAdjust // for 12-hour hour format adjust for PM by adding 12 hours\n    meta.teimzone // the time zone offset in minutes (-720 to +720)\n\nEach parsing function will modify the meta object with its own data. You can\nalso read the data off the meta object, but you should keep in mind the order\nin which parsing functions are executed since you will only be able to read the\ndata added by the previous parse functions. The order in which functions are\nrun is determined by the order in which tokens appear in the format string.\n\nThe regular expression fragment must have all its backslashes escaped. So,\ninstead of typing `'\\d'`, you must type `'\\\\d'`.\n\n_New in 0.3.1:_ After minor fixes to the way [variables](#variables) are used\ninternally, it is finally possible to add new parse recipes.\n\nLet's demonstrate writing a parse function by adding a parse function of the\nnew token we've added in the [previous section](#const-formattokens).\n\n    datetime.PARSE_RECIPES['%o'] = function() {\n        return {\n            re: '31st|30th|20th|1\\\\dth|2?(?:1st|2nd|3rd|[4-9]th)',\n            fn: function(s, meta) {\n                meta.date = parseInt(s.slice(0, -2), 10);\n            }\n        };\n    };\n\n    var s1 = 'December 1st, 2012'\n    var s2 = 'April 22nd, 2003'\n    var s3 = 'January 11th, 2014'\n    var format = '%B %o, %Y'\n\n    console.log(datetime.strptime(s1, format));\n    console.log(datetime.strptime(s2, format));\n    console.log(datetime.strptime(s3, format));\n\nAnd yes, I know the regexp isn't particularly clever, but it's generally a good\nidea to have a regexp that will match only what it needs to.\n\n(If you are wondering why this seemingly very useful token isn't included by\ndefault, it's because it's English only, and DatetimeJS is supposed to b easy\nto localize.)\n\n### `ISO_FORMAT` <a name=\"const-isoformat\"></a>\n\nDefault is `'%Y-%m-%dT%H:%M:%f'`. You can change it to whatever you like. Some\nof the other common forms are:\n\n + `'%Y-%m-%dT%H:%M:%S'`\n + `'%Y-%m-%dT%H:%M:%f%z'`\n + `'%Y-%m-%dT%H:%M:%S%z'`\n + `'%Y-%m-%dT%H:%M:%fZ'`\n + `'%Y-%m-%dT%H:%M%z'`\n\nThis variable is used by [`#isoformat()`](#api-isoformat) and\n[`#isoparse()`](#api-isoparse) methods.\n\n## Formatting tokens <a name=\"formatting-tokens\"></a>\n\nThe following tokens are recognized by `datetime.strftime`:\n\n + %a - Short week day name (e.g. 'Sun', 'Mon'...)\n + %A - Long week day name (e.g., 'Sunday', 'Monday'...)\n + %b - Short month name (e.g., 'Jan', 'Feb'...)\n + %B - Full month name (e.g., 'January', 'February'...)\n + %c - Locale-formatted date and time (platform-dependent)\n + %d - Zero-padded date (e.g, 02, 31...)\n + %D - Non-zero-padded date (e.g., 2, 31...)\n + %f - Zero-padded decimal seconds (e.g., 04.23, 23.50)\n + %H - Zero-padded hour in 24-hour format (e.g., 8, 13, 0...)\n + %i - Non-zero-padded hour in 12-hour format (e.g., 8, 1, 12...)\n + %I - Zero-padded hour in 12-hour format (e.g., 08, 01, 12...)\n + %j - Zero-padded day of year (e.g., 002, 145, 364...)\n + %m - Zero-padded month (e.g., 01, 02...)\n + %M - Zero-padded minutes (e.g., 01, 12, 59...)\n + %n - Non-zero-padded month (e.g., 1, 2...)\n + %N - Non-zero-padded minutes (e.g., 1, 12, 59)\n + %p - AM/PM (a.m. and p.m.)\n + %s - Non-zero-padded seconds (e.g., 1, 2, 50...)\n + %S - Zero-padded seconds (e.g., 01, 02, 50...)\n + %r - Milliseconds (e.g., 1, 24, 500...)\n + %w - Numeric week day where 0 is Sunday (e.g., 0, 1...)\n + %y - Zero-padded year without the century part (e.g., 01, 13, 99...)\n + %Y - Full year (e.g., 2001, 2013, 2099...)\n + %z - Timezone in +HHMM or -HHMM format (e.g., +0200, -0530)\n + %x - Locale-formatted date (platform dependent)\n + %X - Locale-formatted time (platform dependent)\n + %% - Literal percent character %\n\nIf you are coming from Python, you might be used to using `%f` to mean\nmicroseconds. The same token in DatetimeJS has a different meaning (float\nseconds).\n\n## Parsing tokens <a name=\"parsing-tokens\"></a>\n\nThe following tokens are recognized when parsing with `datetime.strptime`:\n\n + %b - Short month name (e.g., 'Jan', 'Feb'...)\n + %B - Full month name (e.g., 'January', 'February'...)\n + %d - Zero-padded date (e.g, 02, 31...)\n + %D - Non-zero-padded date (e.g., 2, 31...)\n + %H - Zero-padded hour in 24-hour format (e.g., 8, 13, 0...)\n + %i - Non-zero-padded hour in 12-hour format (e.g., 8, 1, 12...)\n + %I - Zero-padded hour in 12-hour format (e.g., 08, 01, 12...)\n + %m - Zero-padded month (e.g., 01, 02...)\n + %M - Zero-padded minutes (e.g., 01, 12, 59...)\n + %n - Non-zero-padded month (e.g., 1, 2...)\n + %N - Non-zero-padded minutes (e.g., 1, 12, 59)\n + %p - AM/PM (a.m. and p.m.)\n + %s - Non-zero-padded seconds (e.g., 1, 2, 50...)\n + %S - Zero-padded seconds (e.g., 01, 02, 50...)\n + %r - Milliseconds (e.g., 1, 24, 500...)\n + %y - Zero-padded year without the century part (e.g., 01, 13, 99...)\n + %Y - Full year (e.g., 2001, 2013, 2099...)\n + %z - Time zone in +HHMM or -HHMM format or 'Z' (e.g., +1000, -0200)\n\nThe `%z` token behaves slightly differently when parsing date and time strings.\nIn addition to formats that strftime outputs, it also supports 'Z', which\nallows parsing of ISO timestamps.\n\n## Running unit tests <a name=\"running-unit-tests\"></a>\n\nFor in-browser testing, simply open the `index.html` located in the `tests`\ndirectory. \n\nFor NodeJS, run:\n\n    mocha tests/*.js\n\n## Known issues\n\nIt is not possible to override some of the internal variables that are exposed\nthorugh the module. This will be fixed in 0.4.0. There are currently no known\nworkarounds.\n\n## Reporting bugs\n\nBefore reporting a bug, please make sure all tests are passing. If tests are\nnot passing, please include information about failing tests with your bug\nreport, even if it doesn't seem relevant.\n\nReport all your issues (related to this library, of course) to the [GitHub\nissue tracker](https://github.com/foxbunny/datetimejs/issues).\n",
  "readmeFilename": "README.mkd",
  "_id": "datetimejs@0.3.4",
  "dist": {
    "shasum": "58865b05c61f266ebc4eebf7ad1b2e4fa13d2f0c",
    "tarball": "http://registry.npmjs.org/datetimejs/-/datetimejs-0.3.4.tgz"
  },
  "_from": "datetimejs@*",
  "_npmVersion": "1.2.18",
  "_npmUser": {
    "name": "foxbunny",
    "email": "branko@brankovukelic.com"
  },
  "maintainers": [
    {
      "name": "foxbunny",
      "email": "branko@brankovukelic.com"
    }
  ],
  "directories": {},
  "_shasum": "58865b05c61f266ebc4eebf7ad1b2e4fa13d2f0c",
  "_resolved": "https://registry.npmjs.org/datetimejs/-/datetimejs-0.3.4.tgz"
}
