// Generated by CoffeeScript 1.6.3
var assert, chai, datetime, root;

if (typeof require !== "undefined" && require !== null) {
  chai = require('chai');
  datetime = require('../datetime');
}

if (typeof GLOBAL === "undefined" || GLOBAL === null) {
  root = this;
} else {
  root = GLOBAL;
}

assert = chai.assert;

describe('datetime.datetime', function() {
  describe('#clone', function() {
    it('should create identical version of date object', function() {
      var d, d1;
      d = new Date(2013, 8, 1);
      d1 = datetime.datetime.clone(d);
      return assert.equal(d1 - d, 0);
    });
    return it('should create distinct instances', function() {
      var d, d1;
      d = new Date(2013, 8, 1);
      d1 = datetime.datetime.clone(d);
      return assert.notEqual(d1, d);
    });
  });
  describe('#addDays', function() {
    it('should add one day to date if passed date and 1', function() {
      var d;
      d = new Date(2013, 8, 1);
      d = datetime.datetime.addDays(d, 1);
      return assert.equal(d.getDate(), 2);
    });
    it('should go back 1 day if passed date and -1', function() {
      var d;
      d = new Date(2013, 8, 1);
      d = datetime.datetime.addDays(d, -1);
      assert.equal(d.getDate(), 31);
      return assert.equal(d.getMonth(), 7);
    });
    return it('even changes the year if necessary', function() {
      var d;
      d = new Date(2013, 11, 31);
      d = datetime.datetime.addDays(d, 1);
      assert.equal(d.getDate(), 1);
      assert.equal(d.getMonth(), 0);
      return assert.equal(d.getFullYear(), 2014);
    });
  });
  describe('#addMonths', function() {
    it('should add one month if passed a date and 1', function() {
      var d;
      d = new Date(2013, 8, 1);
      d = datetime.datetime.addMonths(d, 1);
      return assert.equal(d.getMonth(), 9);
    });
    it('should go back one month if passed -1', function() {
      var d;
      d = new Date(2013, 8, 1);
      d = datetime.datetime.addMonths(d, -1);
      return assert.equal(d.getMonth(), 7);
    });
    return it('changes years if we push it', function() {
      var d;
      d = new Date(2013, 8, 1);
      d = datetime.datetime.addMonths(d, 4);
      assert.equal(d.getMonth(), 0);
      return assert.equal(d.getFullYear(), 2014);
    });
  });
  describe('#addYears', function() {
    it('should add a year if passed 1', function() {
      var d;
      d = new Date(2013, 0, 1);
      d = datetime.datetime.addYears(d, 1);
      return assert.equal(d.getFullYear(), 2014);
    });
    it('should go back in time if passed -1', function() {
      var d;
      d = new Date(2013, 0, 1);
      d = datetime.datetime.addYears(d, -1);
      return assert.equal(d.getFullYear(), 2012);
    });
    return it('should go to to next date on leap year', function() {
      var d;
      d = new Date(2012, 1, 29);
      d = datetime.datetime.addYears(d, 1);
      assert.equal(d.getDate(), 1);
      assert.equal(d.getMonth(), 2);
      return assert.equal(d.getFullYear(), 2013);
    });
  });
  describe('#resetTime', function() {
    return it('should reset the time to 0', function() {
      var d;
      d = new Date(2013, 8, 1, 15, 22, 59, 333);
      d = datetime.datetime.resetTime(d);
      assert.equal(d.getHours(), 0);
      assert.equal(d.getMinutes(), 0);
      assert.equal(d.getSeconds(), 0);
      return assert.equal(d.getMilliseconds(), 0);
    });
  });
  describe('#today', function() {
    it('should be today', function() {
      var d1, d2;
      d1 = new Date();
      d2 = datetime.datetime.today();
      assert.equal(d1.getFullYear(), d2.getFullYear());
      assert.equal(d1.getMonth(), d2.getMonth());
      return assert.equal(d1.getDate(), d2.getDate());
    });
    return it('should have reset time', function() {
      var d;
      d = datetime.datetime.today();
      assert.equal(d.getHours(), 0);
      assert.equal(d.getMinutes(), 0);
      assert.equal(d.getSeconds(), 0);
      return assert.equal(d.getMilliseconds(), 0);
    });
  });
  describe('#thisMonth', function() {
    it("should be this month's 1st", function() {
      var d1, d2;
      d1 = new Date();
      d2 = datetime.datetime.thisMonth();
      assert.equal(d1.getFullYear(), d2.getFullYear());
      assert.equal(d1.getMonth(), d2.getMonth());
      return assert.equal(d2.getDate(), 1);
    });
    return it('should have reset time', function() {
      var d;
      d = datetime.datetime.thisMonth();
      assert.equal(d.getHours(), 0);
      assert.equal(d.getMinutes(), 0);
      assert.equal(d.getSeconds(), 0);
      return assert.equal(d.getMilliseconds(), 0);
    });
  });
  return describe('#thisWeek', function() {
    it('should be this Sunday', function() {
      var date, nativeDate;
      nativeDate = Date;
      date = null;
      root.Date = function() {
        return {
          getDay: function() {
            return 4;
          },
          getDate: function() {
            return 10;
          },
          setDate: function(d) {
            return date = d;
          },
          setHours: function() {},
          getTime: function() {}
        };
      };
      datetime.datetime.thisWeek();
      assert.equal(date, 6);
      return root.Date = nativeDate;
    });
    return it('should have reset time', function() {
      var d;
      d = datetime.datetime.thisWeek();
      assert.equal(d.getHours(), 0);
      assert.equal(d.getMinutes(), 0);
      assert.equal(d.getSeconds(), 0);
      return assert.equal(d.getMilliseconds(), 0);
    });
  });
});
